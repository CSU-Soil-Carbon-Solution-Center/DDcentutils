library(devtools)
check()
?person
document()
check()
check()
document()
check()
parseNamespaceFile()
parseNamespaceFile("DDcentutils")
parseNamespaceFile(DDcentutils)
loadNamespace(DDcentutils)
loadNamespace("DDcentutils")
loadNamespace("DDcentutils", R_DEFAULT_PACKAGES=NULL)
load_all()
check()
use_mit_license()
ls()
document() ##updates namespace
warnings()
check()
document() ##updates namespace
check()
ls()
document() ##updates namespace; for roxygen updates
load_all()
check()
#'                      dc_exe_in = dc_exe, dc_path100_in = dc_path100,
#'                      select_years = c(1962,1972),
#'                      dc_var_list = list("aglivc", "NPP"),
#'                      dc_yr_cummsum_list = c("NPP"),
#'                      harvest_var_list = NULL)
#' }
#' @import dplyr
#' @import data.table
#'
#' @export
sensitivity_exp_run <- function(title, site, exp_list,
dc_exe_in = dc_exe, dc_path100_in = dc_path100,
run_base = FALSE,
run_eq = FALSE,
select_years = NULL,
dc_var_list = NULL,
dc_yr_cummsum_list = NULL,
summary_list = NULL,
summary_cummsum_list = NULL,
harvest_var_list = NULL, ...) {
title_no_space <- title %>% gsub(" ", "_",.)
# Run the set of experiments and combine dc_sip data
for (i in exp_list) {
# Run the DayCent simulation for the experiment
print(paste0("Run DayCent with site = ", site, ", scenario = ", i))
DayCentRunSite(site = site, scen = i,
dc_exe_in = dc_exe_in, dc_path100_in = dc_path100_in,
run_base = run_base, run_eq = run_eq)
# Read the dc_sip.csv file and add a date column
temp_summary <- data.table::fread(paste0("./outputs/", i, "_summary.out")) %>%
Add_dateCol() %>% mutate(scen = i)
temp_dc_sip <- read_csv(paste0("./outputs/", i, "_dc_sip.csv")) %>%
Add_dateCol() %>% mutate(scen = i)
temp_harvest <- read_csv(paste0("./outputs/", i, "_harvest.csv")) %>%
Add_dateCol() %>% mutate(scen = i)
# Combine the data into a single DataFrame
if(which(i == exp_list) == 1){
combined_dc_sip <- temp_dc_sip
combined_harvest <- temp_harvest
combined_summary <- temp_summary
} else {
combined_dc_sip  <- combined_dc_sip %>% add_row(temp_dc_sip)
combined_harvest <- combined_harvest %>% add_row(temp_harvest)
combined_summary <- combined_summary %>% add_row(temp_summary)
}
}
if (!is.null(select_years)){
combined_dc_sip <- combined_dc_sip %>% filter(year(date) >= select_years[[1]],
year(date) <= select_years[[2]])
combined_harvest <- combined_harvest %>% filter(year(date) >= select_years[[1]],
year(date) <= select_years[[2]])
}
# Create plots for the specified variables
p_j <- list()
p_j_names <- list()
p_j[[1]] <- ggplot(combined_dc_sip) +
# geom_point(aes(x = date, y = `som1c(2)`+`som2c(2)`+ som3c, col = scen)) + #.data[[j]]
geom_line(aes(x = date, y = `som1c(2)`+`som2c(2)`+ som3c, col = scen)) + #.data[[j]]
labs(title = paste(title, "SOC"), col = "Experiment", y = "SOC [g/m2 C]") +
theme_classic()
p_j_names[[1]] = paste0(title_no_space, "_SOC")
k <- 2
if(length(dc_var_list)>0){
for (j in dc_var_list) {
p_j[[k]] <- ggplot(combined_dc_sip) +
# geom_point(aes(x = date, y = .data[[j]], col = scen)) + #.data[[j]]
geom_line(aes(x = date, y = .data[[j]], col = scen)) + #.data[[j]]
labs(title = paste(title, j), col = "Experiment") +
theme_classic()
p_j_names[[k]] = paste0(title_no_space, "_", j)
k <- k + 1
}
}
if(length(dc_yr_cummsum_list)>0){
for (j in dc_yr_cummsum_list) {
# Calculate cumulative sum grouped by year and scen
combined_dc_sip_j <- combined_dc_sip %>%
group_by(year(date), scen) %>%
mutate(!!paste0(j, "_cum") := cumsum(.data[[j]])) # Dynamically create the cumulative sum column
# Create the plot
p_j[[k]] <- ggplot(combined_dc_sip_j) +
# geom_point(aes(x = date, y = .data[[paste0(j, "_cum")]], col = scen)) + # Use cumulative column
geom_line(aes(x = date, y = .data[[paste0(j, "_cum")]], col = scen)) +  # Use cumulative column
labs(title = paste(title, j, "Cumulative Sum"), col = "Experiment") +
theme_classic()
p_j_names[[k]] = paste0(title_no_space, "_", j, "_cs")
k <- k + 1
}
}
if(length(summary_list)>0){
for (j in summary_list) {
p_j[[k]] <- ggplot(combined_summary) +
# geom_point(aes(x = date, y = .data[[j]], col = scen)) + #.data[[j]]
geom_line(aes(x = date, y = .data[[j]], col = scen)) + #.data[[j]]
labs(title = paste(title, j), col = "Experiment") +
theme_classic()
p_j_names[[k]] = paste0(title_no_space, "_", j)
k <- k + 1
}
}
if(length(summary_cummsum_list)>0){
for (j in dc_yr_cummsum_list) {
# Calculate cumulative sum grouped by year and scen
combined_summary_j <- combined_summary %>%
group_by(year(date), scen) %>%
mutate(!!paste0(j, "_cum") := cumsum(.data[[j]])) # Dynamically create the cumulative sum column
# Create the plot
p_j[[k]] <- ggplot(combined_summary_j) +
# geom_point(aes(x = date, y = .data[[paste0(j, "_cum")]], col = scen)) + # Use cumulative column
geom_line(aes(x = date, y = .data[[paste0(j, "_cum")]], col = scen)) +  # Use cumulative column
labs(title = paste(title, j, "Cumulative Sum"), col = "Experiment") +
theme_classic()
p_j_names[[k]] = paste0(title_no_space, "_", j, "_cs")
k <- k + 1
}
}
if(length(harvest_var_list)>0){
for (j in harvest_var_list) {
p_j[[k]] <- ggplot(combined_harvest) +
geom_point(aes(x = date, y = .data[[j]], col = scen, shape = crpval)) + #.data[[j]]
geom_line(aes(x = date, y = .data[[j]], col = scen, group = interaction(scen, crpval))) + #.data[[j]]
labs(title = paste(title, j), col = "Experiment", shape = "Crop") +
theme_classic()
p_j_names[[k]] = paste0(title_no_space, "_", j)
k <- k + 1
}
}
# Save the sensitivity files
save_figure_temp_path = paste0("./outputs/",title_no_space,"/")
if(!dir.exists(save_figure_temp_path)){
dir.create(save_figure_temp_path, recursive = T)
}else{
unlink(list.files(save_figure_temp_path, full.names = T))
}
write_csv(combined_dc_sip, file = paste0(save_figure_temp_path,
title %>% gsub(" ", "_",.), "_dcsip.csv"))
write_csv(combined_harvest, file = paste0(save_figure_temp_path,
title %>% gsub(" ", "_",.), "_harvest.csv"))
n = 1
for (plot in p_j) {
ggsave(filename = paste0(save_figure_temp_path,p_j_names[[n]],".jpeg"),plot = plot, width = 8, height = 6)
n = n +1
}
message("Sensitivity figures saved to saved to: ", save_figure_temp_path)
}
document() ##updates namespace; for roxygen updates
load_all()
use_mit_license()
check()
document() ##updates namespace; for roxygen updates
check()
document() ##updates namespace; for roxygen updates
load_all()
check()
list(ls = ls())
rm(ls())
rm(list = ls())
ls()
document() ##updates namespace; for roxygen updates
load_all()
use_mit_license()
check()
check(run_dont_test = T)
document() ##updates namespace; for roxygen updates
load_all()
check(run_dont_test = T)
document() ##updates namespace; for roxygen updates
load_all()
check(run_dont_test = T)
?lm
install()
install()
library(DDcentutils)
?install
library(devtools)
here::here()
create_package(here::here())
create_package(here::here())
library(devtools)
create_package(here::here())
document() ##updates namespace; for roxygen updates
load_all()
install()
?build
here::here()
build(path = here::here())
citation("DDcentutils")
here("DDcentutils_0.0.0.9000.tar")
here::here("DDcentutils_0.0.0.9000.tar")
install.packages(path = here::here("DDcentutils_0.0.0.9000.tar"), repos = NULL)
install.packages(path = here::here("DDcentutils_0.0.0.9000.tar"), repos = NULL, type = "source")
library(DDcentutils)
citation("DDcentutils")
document() ##updates namespace; for roxygen updates
library(devtools)
library(devtools)
document() ##updates namespace; for roxygen updates
load_all()
remove.packages("DDcentutils")
document() ##updates namespace; for roxygen updates
load_all()
?person
document() ##updates namespace; for roxygen updates
use_mit_license()
check(run_dont_test = T)
document() ##updates namespace; for roxygen updates
load_all()
check(run_dont_test = T)
document() ##updates namespace; for roxygen updates
load_all()
check(run_dont_test = T)
build(path = here::here())
install.packages(path = here::here("DDcentutils_0.0.0.9000.tar"), repos = NULL, type = "source")
library(DDcentutils)
citation("DDcentutils")
?person
document() ##updates namespace; for roxygen updates
load_all()
build(path = here::here())
install.packages(path = here::here("DDcentutils_0.0.0.9000.tar"), repos = NULL, type = "source")
library(DDcentutils)
citation("DDcentutils")
citation("reghelper")
citation("daymetr")
source("~/.active-rstudio-document", echo=TRUE)
document() ##updates namespace; for roxygen updates
load_all()
install()
build(path = here::here())
install.packages(path = here::here("DDcentutils_0.0.0.9000.tar"), repos = NULL, type = "source")
library(DDcentutils)
citation("DDcentutils")
citation("lm")
citation("afex")
