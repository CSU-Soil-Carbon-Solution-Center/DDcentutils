### Loads package functions
## Function won't appear in the global environment
load_all()
### Runs checks in the shell
## check errors, warnings, and notes from output
check(run_dont_test = T)
### Builds the package as a single compressed tar.gz package
## Compressed package can be installed locally on any platform
build(path = here::here())
### Installs the package in the library
install()
library(devtools)
### Rendering documentation for package
document() ## also updates namespace file; for roxygen updates
### Loads package functions
## Function won't appear in the global environment
load_all()
### Builds the package as a single compressed tar.gz package
## Compressed package can be installed locally on any platform
build(path = here::here())
library(devtools)
use_version()
### Loads package functions
## Function won't appear in the global environment
load_all()
### Configures license for the package
use_mit_license()
library(nasapower)
library(devtools)
### Rendering documentation for package
document() ## also updates namespace file; for roxygen updates
### Loads package functions
## Function won't appear in the global environment
load_all()
### Installs the package in the library
install()
here::here()
### Builds the package as a single compressed tar.gz package
## Compressed package can be installed locally on any platform
build(path = here::here())
ls()
### Loads package functions
## Function won't appear in the global environment
load_all()
### Installs the package in the library
install()
run
library(devtools)
### Rendering documentation for package
document() ## also updates namespace file; for roxygen updates
### Loads package functions
## Function won't appear in the global environment
load_all()
### Installs the package in the library
install()
paste0("./outputs/", scen)
library(devtools)
### Rendering documentation for package
document() ## also updates namespace file; for roxygen updates
### Loads package functions
## Function won't appear in the global environment
load_all()
### Installs the package in the library
install()
log %>% tail(1)
### Rendering documentation for package
document() ## also updates namespace file; for roxygen updates
### Loads package functions
## Function won't appear in the global environment
load_all()
### Installs the package in the library
install()
### Rendering documentation for package
document() ## also updates namespace file; for roxygen updates
### Loads package functions
## Function won't appear in the global environment
load_all()
library(devtools)
### Rendering documentation for package
document() ## also updates namespace file; for roxygen updates
### Installs the package in the library
install()
### Rendering documentation for package
document() ## also updates namespace file; for roxygen updates
### Loads package functions
## Function won't appear in the global environment
load_all()
### Installs the package in the library
install()
### Rendering documentation for package
document() ## also updates namespace file; for roxygen updates
### Loads package functions
## Function won't appear in the global environment
load_all()
### Installs the package in the library
install()
library(devtools)
### Rendering documentation for package
document() ## also updates namespace file; for roxygen updates
### Loads package functions
## Function won't appear in the global environment
load_all()
### Installs the package in the library
install()
library(devtools)
### Rendering documentation for package
document() ## also updates namespace file; for roxygen updates
### Loads package functions
## Function won't appear in the global environment
load_all()
### Installs the package in the library
install()
?DayCentRunSite
?yday
lat <- 40.58
lon <- -105.08
site <- "Sample Site"
ownload_daymet(path = outDir,
site = site, lat = lat, lon = lon,
start = start, end = end, internal = FALSE)
library(daymetr)
download_daymet(path = outDir,
site = site, lat = lat, lon = lon,
start = start, end = end, internal = FALSE)
raw_data_path = NULL
outDir = ifelse(is.null(raw_data_path), tempdir(), raw_data_path)
download_daymet(path = outDir,
site = site, lat = lat, lon = lon,
start = start, end = end, internal = FALSE)
start = 2000, end = 2010
start = 2000
end = 2010
start = 1980
end = 2025
star = 2000
start = 2000
rm(star)
download_daymet(path = outDir,
site = site, lat = lat, lon = lon,
start = start, end = end, internal = FALSE)
start
end
end = 2020
download_daymet(path = outDir,
site = site, lat = lat, lon = lon,
start = start, end = end, internal = FALSE)
weather_data = read_csv(file.path(outDir, paste0(site,"_", start, "_", end,".csv")), skip =6)
library(tidyverse)
weather_data <- read_csv(file.path(outDir, paste0(site,"_", start, "_", end,".csv")), skip =6)
weather_data
#add leap years
weather_data <- addLeapYear(weather_data) %>% arrange(date)
weather_data
weather_data %>% view
?calVPDfromVP
lat <- 40.58
lon <- -105.08
site <- "Sample Site"
outDir <- ifelse(is.null(raw_data_path), tempdir(), raw_data_path)
download_daymet(path = outDir,
site = site, lat = lat, lon = lon,
start = start, end = end, internal = FALSE)
weather_data <- read_csv(file.path(outDir, paste0(site,"_", start, "_", end,".csv")), skip =6)
#add leap years
weather_data <- addLeapYear(weather_data) %>% arrange(date)
#Columns and unit conversions
weather_data_DayCent <- weather_data %>% mutate(
day = day(date),
month = month(date),
tmax_C = `tmax (deg c)`,
tmin_C = `tmin (deg c)`,
prcp_cm_day =`prcp (mm/day)`/10,
srad_Wm2 = `srad (W/m^2)`, # daily total radiation (MJ/m2/day) = (srad (W/m2) * dayl (s/day)) / l,000,000)
VPD_kpa_day = `vp (Pa)`/1000 # calVPDfromVP(TAvg_c =(tmax_C+tmin_C)/2, VP_kpA = `vp (Pa)`/1000)
) %>%
select(day, month, year, yday, tmax_C, tmin_C, prcp_cm_day, srad_Wm2, VPD_kpa_day)
weather_data %>% view
#Columns and unit conversions
weather_data_DayCent <- weather_data %>% mutate(
day = day(date),
month = month(date),
tmax_C = `tmax (deg c)`,
tmin_C = `tmin (deg c)`,
prcp_cm_day =`prcp (mm/day)`/10,
srad_Wm2 = `srad (W/m^2)`, # daily total radiation (MJ/m2/day) = (srad (W/m2) * dayl (s/day)) / l,000,000)
VPD_kpa_day = `vp (Pa)`/1000 # calVPDfromVP(TAvg_c =(tmax_C+tmin_C)/2, VP_kpA = `vp (Pa)`/1000)
) %>%
dplyr::select(day, month, year, yday, tmax_C, tmin_C, prcp_cm_day, srad_Wm2, VPD_kpa_day)
weather_data %>% view
weather_data_DayCent %>% view
getDaymetData(raw_data_path = NULL, site = site,lat = lat, lon = lon, start = 2000, end = 2010)
#' # Example usage
#' lat <- 40.58
#' lon <- -105.08
#' site <- "Sample Site"
#' weather <- getDaymetData(raw_data_path = NULL, site = site,
#'                           lat = lat, lon = lon, start = 2000, end = 2010)
#'
#' @import daymetr
#' @import dplyr
#' @export
getDaymetData <- function(raw_data_path = NULL, site = site,
lat = lat, lon = lon,
start = start, end = end, ...){
outDir <- ifelse(is.null(raw_data_path), tempdir(), raw_data_path)
download_daymet(path = outDir,
site = site, lat = lat, lon = lon,
start = start, end = end, internal = FALSE)
weather_data <- read_csv(file.path(outDir, paste0(site,"_", start, "_", end,".csv")), skip =6)
#add leap years
weather_data <- addLeapYear(weather_data) %>% arrange(date)
#Columns and unit conversions
weather_data_DayCent <- weather_data %>% mutate(
day = day(date),
month = month(date),
tmax_C = `tmax (deg c)`,
tmin_C = `tmin (deg c)`,
prcp_cm_day =`prcp (mm/day)`/10,
srad_Wm2 = `srad (W/m^2)`, # daily total radiation (MJ/m2/day) = (srad (W/m2) * dayl (s/day)) / l,000,000)
VPD_kpa_day = `vp (Pa)`/1000 # calVPDfromVP(TAvg_c =(tmax_C+tmin_C)/2, VP_kpA = `vp (Pa)`/1000)
) %>%
dplyr::select(day, month, year, yday, tmax_C, tmin_C, prcp_cm_day, srad_Wm2, VPD_kpa_day)
}
getDaymetData(raw_data_path = NULL, site = site,lat = lat, lon = lon, start = 2000, end = 2010)
t <- getDaymetData(raw_data_path = NULL, site = site,lat = lat, lon = lon, start = 2000, end = 2010)
t
view(t)
weather_data <- get_power(
community = "ag",
pars = c("T2M_MIN", "T2M_MAX", "PRECTOTCORR", "RH2M", "ALLSKY_SFC_SW_DWN", "WS2M" ),
# need all the parameters here: Tmin (C), Tmax (C), Prcip (mm/day), RHm (%), ALLSKY_SFC_SW_DWN (W/m²), wind (m/s),
temporal_api = "daily",
lonlat = c(lon,lat),
dates = c(start, end)
)
library(nasapower)
weather_data <- get_power(
community = "ag",
pars = c("T2M_MIN", "T2M_MAX", "PRECTOTCORR", "RH2M", "ALLSKY_SFC_SW_DWN", "WS2M" ),
# need all the parameters here: Tmin (C), Tmax (C), Prcip (mm/day), RHm (%), ALLSKY_SFC_SW_DWN (W/m²), wind (m/s),
temporal_api = "daily",
lonlat = c(lon,lat),
dates = c(start, end)
)
paste0(start, "-01-01")
weather_data <- get_power(
community = "ag",
pars = c("T2M_MIN", "T2M_MAX", "PRECTOTCORR", "RH2M", "ALLSKY_SFC_SW_DWN", "WS2M" ),
# need all the parameters here: Tmin (C), Tmax (C), Prcip (mm/day), RHm (%), ALLSKY_SFC_SW_DWN (W/m²), wind (m/s),
temporal_api = "daily",
lonlat = c(lon,lat),
dates = c(paste0(start, "-01-01"), paste0(start, "-12-31"))
)
weather_data
weather_data %>% view
weather_data %>% view
#add leap years
weather_data <- addLeapYear(weather_data) %>% arrange(YYYYMMDD)
weather_data <- get_power(
community = "ag",
pars = c("T2M_MIN", "T2M_MAX", "PRECTOTCORR", "RH2M", "ALLSKY_SFC_SW_DWN", "WS2M" ),
# need all the parameters here: Tmin (C), Tmax (C), Prcip (mm/day), RHm (%), ALLSKY_SFC_SW_DWN (W/m²), wind (m/s),
temporal_api = "daily",
lonlat = c(lon,lat),
dates = c(paste0(start, "-01-01"), paste0(start, "-12-31"))
) %>% rename_all(~str_to_lower(.))
view(weather_data)
#add leap years
weather_data <- addLeapYear(weather_data) %>% arrange(yyyymmdd)
rlang::last_trace()
colnames(weatherdata)
colnames(weather_data)
weather_data <- get_power(
community = "ag",
pars = c("T2M_MIN", "T2M_MAX", "PRECTOTCORR", "RH2M", "ALLSKY_SFC_SW_DWN", "WS2M" ),
# need all the parameters here: Tmin (C), Tmax (C), Prcip (mm/day), RHm (%), ALLSKY_SFC_SW_DWN (W/m²), wind (m/s),
temporal_api = "daily",
lonlat = c(lon,lat),
dates = c(paste0(start, "-01-01"), paste0(start, "-12-31"))
) %>% rename_all(~str_to_lower(.)) %>%
rename(yday = doy, date = yyyymmdd)
#add leap years
weather_data <- addLeapYear(weather_data) %>% arrange(date)
weather_data <- get_power(
community = "ag",
pars = c("T2M_MIN", "T2M_MAX", "PRECTOTCORR", "RH2M", "ALLSKY_SFC_SW_DWN", "WS2M" ),
# need all the parameters here: Tmin (C), Tmax (C), Prcip (mm/day), RHm (%), ALLSKY_SFC_SW_DWN (W/m²), wind (m/s),
temporal_api = "daily",
lonlat = c(lon,lat),
dates = c(paste0(start, "-01-01"), paste0(start, "-12-31"))
) %>% rename_all(~str_to_lower(.)) %>%
rename(yday = doy, date = yyyymmdd)
weather_data %>% filter(year %% 4 == 0, yday == 365)
weather_data %>% filter(year %% 4 == 0, yday == 365) %>% view
weather_data %>% filter(year %% 4 == 0) %>% view
weather_data %>% filter(yday == 366)
get_power(
community = "ag",
pars = c("T2M_MIN", "T2M_MAX", "PRECTOTCORR", "RH2M", "ALLSKY_SFC_SW_DWN", "WS2M" ),
# need all the parameters here: Tmin (C), Tmax (C), Prcip (mm/day), RHm (%), ALLSKY_SFC_SW_DWN (W/m²), wind (m/s),
temporal_api = "daily",
lonlat = c(lon,lat),
dates = c(paste0(start, "-01-01"), paste0(start, "-12-31")))
weather_data <- get_power(
community = "ag",
pars = c("T2M_MIN", "T2M_MAX", "PRECTOTCORR", "RH2M", "ALLSKY_SFC_SW_DWN", "WS2M" ),
# need all the parameters here: Tmin (C), Tmax (C), Prcip (mm/day), RHm (%), ALLSKY_SFC_SW_DWN (W/m²), wind (m/s),
temporal_api = "daily",
lonlat = c(lon,lat),
dates = c(paste0(start, "-01-01"), paste0(end, "-12-31"))) %>%
rename_all(~str_to_lower(.)) %>%
rename(yday = doy, date = yyyymmdd)
weather_data %>% filter(yday == 366)
weather_data %>% filter(yday == 366) %>% view
weather_data <- get_power(
community = "ag",
pars = c("T2M_MIN", "T2M_MAX", "PRECTOTCORR", "RH2M", "ALLSKY_SFC_SW_DWN", "WS2M" ),
# need all the parameters here: Tmin (C), Tmax (C), Prcip (mm/day), RHm (%), ALLSKY_SFC_SW_DWN (W/m²), wind (m/s),
temporal_api = "daily",
lonlat = c(lon,lat),
dates = c(paste0(start, "-01-01"), paste0(end, "-12-31")))
# Updating units and aligning with daycent variable order
weather_data_DayCent <- weather_data %>% mutate(day = day(YYYYMMDD),
month = month(YYYYMMDD),
yday = DOY,
year = YEAR,
tmax_C = T2M_MAX,
tmin_C = T2M_MIN,
prcp_cm_day = PRECTOTCORR/10,
RH2M = RH2M,
srad_Wm2 = ALLSKY_SFC_SW_DWN*41.67, #converting from kwh m2 to W m2
WS2M = WS2M*2.236) %>% # from ms to mph
dplyr:: select(day, month, year, yday, tmax_C, tmin_C, prcp_cm_day, srad_Wm2, RH2M, WS2M)
weather_data_DayCent
weather_data_DayCent %>% view
#' @examples
#' # Example usage
#' lat <- 40.58
#' lon <- -105.08
#' site <- "Sample Site"
#' weather <- getNASAPowerData(raw_data_path = NULL, site = site,
#'                             lat = lat, lon = lon, start = 2000, end = 2020)
#'
#' @import nasapower
#' @export
getNASAPowerData <- function(raw_data_path = NULL,
site = site, lat = lat, lon = lon,
start = start, end = end){
weather_data <- get_power(
community = "ag",
pars = c("T2M_MIN", "T2M_MAX", "PRECTOTCORR", "RH2M", "ALLSKY_SFC_SW_DWN", "WS2M" ),
# need all the parameters here: Tmin (C), Tmax (C), Prcip (mm/day), RHm (%), ALLSKY_SFC_SW_DWN (W/m²), wind (m/s),
temporal_api = "daily",
lonlat = c(lon,lat),
dates = c(paste0(start, "-01-01"), paste0(end, "-12-31")))
# Updating units and aligning with daycent variable order
weather_data_DayCent <- weather_data %>% mutate(day = day(YYYYMMDD),
month = month(YYYYMMDD),
yday = DOY,
year = YEAR,
tmax_C = T2M_MAX,
tmin_C = T2M_MIN,
prcp_cm_day = PRECTOTCORR/10,
RH2M = RH2M,
srad_Wm2 = ALLSKY_SFC_SW_DWN*41.67, #converting from kwh m2 to W m2
WS2M = WS2M*2.236) %>% # from ms to mph
dplyr:: select(day, month, year, yday, tmax_C, tmin_C, prcp_cm_day, srad_Wm2, RH2M, WS2M)
}
lat <- 40.58
lon <- -105.08
site <- "Sample Site"
tNASAPowerData(raw_data_path = NULL, site = site,
lat = lat, lon = lon, start = 2000, end = 2020)
getNASAPowerData(raw_data_path = NULL, site = site,
lat = lat, lon = lon, start = 2000, end = 2020)
t <- getNASAPowerData(raw_data_path = NULL, site = site,
lat = lat, lon = lon, start = 2000, end = 2020)
t
view(t)
library(devtools)
### Rendering documentation for package
document() ## also updates namespace file; for roxygen updates
### Loads package functions
## Function won't appear in the global environment
load_all()
### Installs the package in the library
install()
### Rendering documentation for package
document() ## also updates namespace file; for roxygen updates
### Loads package functions
## Function won't appear in the global environment
load_all()
library(devtools)
### Creating package locally
## Do not run if already built
create_package(here::here())
### Rendering documentation for package
document() ## also updates namespace file; for roxygen updates
### Loads package functions
## Function won't appear in the global environment
load_all()
### Installs the package in the library
install()
logs <- list()
logs
log <- DayCentRunSite(site = site, scen = i, run_base = run_base,
run_eq = run_eq, dc_exe_in = dc_path100_explore)
library(devtools)
### Rendering documentation for package
document() ## also updates namespace file; for roxygen updates
### Loads package functions
## Function won't appear in the global environment
load_all()
### Installs the package in the library
install()
library(devtools)
### Rendering documentation for package
document() ## also updates namespace file; for roxygen updates
### Loads package functions
## Function won't appear in the global environment
load_all()
### Installs the package in the library
install()
library(devtools)
### Rendering documentation for package
document() ## also updates namespace file; for roxygen updates
### Loads package functions
## Function won't appear in the global environment
load_all()
### Installs the package in the library
install()
library(devtools)
### Rendering documentation for package
document() ## also updates namespace file; for roxygen updates
### Loads package functions
## Function won't appear in the global environment
load_all()
### Configures license for the package
use_mit_license()
### Installs the package in the library
install()
?sensitivity_exp_run
### Rendering documentation for package
document() ## also updates namespace file; for roxygen updates
library(devtools)
### Rendering documentation for package
document() ## also updates namespace file; for roxygen updates
### Loads package functions
## Function won't appear in the global environment
load_all()
### Installs the package in the library
install()
?sensitivity_exp_run
?update_daycent_site_file
?update_sch
?update_daycent_site_file
library(devtools)
### Rendering documentation for package
document() ## also updates namespace file; for roxygen updates
library(devtools)
### Rendering documentation for package
document() ## also updates namespace file; for roxygen updates
### Rendering documentation for package
document() ## also updates namespace file; for roxygen updates
### Loads package functions
## Function won't appear in the global environment
load_all()
### Configures license for the package
use_mit_license()
### Installs the package in the library
install()
scen <- "cc_nt"
paste0("outputs/", scen, "/", scen, "_watrbal.out")
read_layer_data <- function(file_path){
data = fread(file_path)
names(data) = c("time", "dayofyr", paste0("Layer_",seq(1,(ncol(data)-2))))
data = data %>% Add_dateCol()
}
# if(!is.null(years_in))
Watbaldata <- fread(Watbaldata_file, skip = 1)
library(data.table)
read_layer_data <- function(file_path){
data = fread(file_path)
names(data) = c("time", "dayofyr", paste0("Layer_",seq(1,(ncol(data)-2))))
data = data %>% Add_dateCol()
}
fread(Watbaldata_file, skip = 1)
### Rendering documentation for package
document() ## also updates namespace file; for roxygen updates
### Loads package functions
## Function won't appear in the global environment
load_all()
### Installs the package in the library
install()
paste0("Water balance file", Watbaldata_file, " not found.")
paste0("Water balance file", Watbaldata_file, " not found.")
### Rendering documentation for package
document() ## also updates namespace file; for roxygen updates
library(devtools)
### Rendering documentation for package
document() ## also updates namespace file; for roxygen updates
### Loads package functions
## Function won't appear in the global environment
load_all()
### Installs the package in the library
install()
### Creating package locally
## Do not run if already built
create_package(here::here())
### Creating package locally
## Do not run if already built
create_package(here::here())
